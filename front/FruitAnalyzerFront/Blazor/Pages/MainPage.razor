@page "/"
@using FruitComponent
@using FruitAnalyzerFront.AppLogic
@rendermode InteractiveServer

<RadzenStack AlignItems="Radzen.AlignItems.Center" JustifyContent="Radzen.JustifyContent.Center" Wrap="Radzen.FlexWrap.Wrap" Style="width: 100%; height: 800px">
	<RadzenColumn Style="width: 100%; position: relative; text-align: center">
	<FruitUploader onCancel=@onImageCancel onUpload=@onImageUpload />
	<FruitAnalyzeButton visible=@getAnalyzeButtunVisibility() onClick=@onAnalyzeButtonClick />
	<RadzenRow AlignItems="Radzen.AlignItems.Center" JustifyContent="Radzen.JustifyContent.SpaceEvenly">
		<FruitChart visible=@getResultsVisibility() />
		<FruitResultCard visible=@getResultsVisibility() fruitName="Banana" fruitProbability=55.5 />
	</RadzenRow>
	</RadzenColumn>

</RadzenStack>

@code {
	string currentImageName { get; set; } = "";
	ImageStatus currentImageStatus = ImageStatus.Missing;

	bool getAnalyzeButtunVisibility() => currentImageStatus == ImageStatus.Uploaded;
	bool getResultsVisibility() => this.currentImageStatus == ImageStatus.Analyzed;

	void onImageCancel(UploadChangeEventArgs args)
	{
		this.currentImageStatus = ImageStatus.Missing;
		this.currentImageName = "";
	}

	async Task onImageUpload(UploadChangeEventArgs args) 
	{
		this.currentImageStatus = ImageStatus.Uploading;

		var file = args.Files.First();

		this.currentImageName = file.Name;

		using (var fileStream = file.OpenReadStream())
		{
			using (var ms = new MemoryStream())
			{
				await fileStream.CopyToAsync(ms);

				byte[] fileBytes = ms.ToArray();

				// await FruitAPI.UploadImage(fileBytes, this.currentImageName);
			}
		}

		this.currentImageStatus = ImageStatus.Uploaded;
	}

	void onAnalyzeButtonClick(MouseEventArgs args)
	{
		// var fruitData = await FruitAPI.AnalyzeFruit(this.currentImageName);

		Console.WriteLine("Change visibility");
		this.currentImageStatus = ImageStatus.Analyzed;
		this.currentImageName = "";
		StateHasChanged();
	}

}
