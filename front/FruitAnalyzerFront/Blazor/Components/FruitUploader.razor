@namespace FruitComponent

<RadzenUpload id="ddUpload" @ref="uploadDD" 
    ChooseText="Drag and drop your fruit here" 
    Auto="false" 
    Multiple="false"
    Url="upload/multiple" 
    InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
    Progress=@(args => OnProgress(args, "Drag and drop files to upload")) 
Style="width: 100%; position: relative; border: 2px dashed var(--rz-secondary); border-radius: 5px;" />


<style>
    #ddUpload {
        --rz-upload-button-bar-padding: 0;
    }

    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        height: 300px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 16px;
        color: var(--rz-secondary);
        background-color: var(--rz-white);
    }
</style>


@code {
    RadzenUpload upload;
    RadzenUpload uploadDD;

    int progress;
    bool showProgress;
    bool showComplete;
    string completionMessage;
    bool cancelUpload = false;

    void CancelUpload()
    {
        cancelUpload = true;
    }

    int customParameter = 1;

    void OnChange(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            // console.Log($"File: {file.Name} / {file.Size} bytes");
        }

        // console.Log($"{name} changed");
    }

    void OnProgress(UploadProgressArgs args, string name)
    {
        // console.Log($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                // console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    void OnComplete(UploadCompleteEventArgs args)
    {
        // console.Log($"Server response: {args.RawResponse}");
    }

    void OnClientChange(UploadChangeEventArgs args)
    {
        // console.Log($"Client-side upload changed");

        foreach (var file in args.Files)
        {
            // console.Log($"File: {file.Name} / {file.Size} bytes");

            try
            {
                long maxFileSize = 10 * 1024 * 1024;
                // read file
                var stream = file.OpenReadStream(maxFileSize);
                stream.Close();
            }
            catch (Exception ex)
            {
                // console.Log($"Client-side file read error: {ex.Message}");
            }
        }
    }
}
