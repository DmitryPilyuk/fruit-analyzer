@page "/"
@using FruitComponent
@using FruitAnalyzerFront.AppLogic
@using FruitAnalyzerFront.Blazor.Scripts
@rendermode InteractiveServer

<RadzenStack AlignItems="Radzen.AlignItems.Center" JustifyContent="Radzen.JustifyContent.Center" Wrap="Radzen.FlexWrap.Wrap" Style="width: 100%; height: 100vh">
	<RadzenColumn Style="width: 100%; height: auto; position: relative; text-align: center">
		<FruitUploader onCancel=@onImageCancel onUpload=@onImageUpload />
		<FruitAnalyzeButton visible=@getAnalyzeButtunVisibility() onClick=@onAnalyzeButtonClick />
		<RadzenRow AlignItems="Radzen.AlignItems.Center" JustifyContent="Radzen.JustifyContent.SpaceAround">
			<RadzenColumn>
				<FruitChart visible=@getResultsVisibility() chartColors=@currentChartColors chartItems=@currentChartItems />
			</RadzenColumn>
			<RadzenColumn>
				<RadzenStack Orientation="Orientation.Vertical" AlignItems="Radzen.AlignItems.Center" JustifyContent="Radzen.JustifyContent.Center">
					<FruitResultCard visible=@getResultsVisibility() fruitName=@recognyzedFruitName fruitProbability=@recognyzedFruitProbability />
					<FruitModelSelector visible=@getResultsVisibility() onValueChanged=@onAnalyzeModelSelect />
				</RadzenStack>
			</RadzenColumn>
		</RadzenRow>
	</RadzenColumn>

</RadzenStack>

@code {
	string currentImageName { get; set; } = String.Empty;
	ImageStatus currentImageStatus = ImageStatus.Missing;

	FruitChart.FruitChartItem[] currentChartItems { get; set; } = Array.Empty<FruitChart.FruitChartItem>();
	string[] currentChartColors { get; set; } = Array.Empty<string>();

	string recognyzedFruitName { get; set; } = String.Empty;
	double recognyzedFruitProbability { get; set; }

	string currentAnalyzeModel { get; set; } = AnalyzeModelName.BasicModel;

	bool getAnalyzeButtunVisibility() => currentImageStatus == ImageStatus.Uploaded;
	bool getResultsVisibility() => this.currentImageStatus == ImageStatus.Analyzed;

	void onImageCancel(UploadChangeEventArgs args)
	{
		this.currentImageStatus = ImageStatus.Missing;
		this.currentImageName = String.Empty;
		this.currentAnalyzeModel = AnalyzeModelName.BasicModel;
	}

	async Task onImageUpload(UploadChangeEventArgs args) 
	{
		this.currentImageStatus = ImageStatus.Uploading;

		var file = args.Files.First();

		this.currentImageName = file.Name;

		using (var fileStream = file.OpenReadStream())
		{
			using (var ms = new MemoryStream())
			{
				await fileStream.CopyToAsync(ms);

				byte[] fileBytes = ms.ToArray();

				await FruitAPI.UploadImage(fileBytes, this.currentImageName);
			}
		}

		this.currentImageStatus = ImageStatus.Uploaded;
	}

	async Task onAnalyzeButtonClick(MouseEventArgs args)
	{
		await updateResults();
	}

	async Task onAnalyzeModelSelect(string? value) 
	{
		if (value == null)
			return;

		this.currentAnalyzeModel = value;

		await updateResults();
	}

	async Task updateResults() 
	{
		var fruitData = await FruitAPI.AnalyzeFruit(this.currentImageName, this.currentAnalyzeModel);

		this.currentChartItems = fruitData.ToFruitChartItems();
		this.currentChartColors = currentChartItems.ToColorArray();

		var recognyzedFruit = currentChartItems.FindFruitWithMaxProbability();

		this.recognyzedFruitName = recognyzedFruit.Fruit;
		this.recognyzedFruitProbability = recognyzedFruit.Probability;

		this.currentImageStatus = ImageStatus.Analyzed;
	}

}
